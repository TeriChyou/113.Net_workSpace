// Controllers/ProductsController.cs
using finalPrac.Data; // For ApplicationDbContext
using finalPrac.Models; // For Product model
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore; // For async methods like ToListAsync, SaveChangesAsync
using System; // For DateTime
using System.Linq; // For LINQ methods
using System.Text;
using System.Threading.Tasks; // For async/await

public class ProductsController : Controller
{
    private readonly ApplicationDbContext _context;

    // Use dependency injection to get the DbContext instance
    public ProductsController(ApplicationDbContext context)
    {
        _context = context;
    }

    // GET: /Products/Index (or ProductList)
    // Displays a paginated list of products
    public async Task<IActionResult> Index(int _ID = 1) // _ID is the current page number, defaults to 1
    {
        int PageSize = 10; // Number of products per page, adjust as needed

        int RecordCount = await _context.Productss.CountAsync(); // Total number of products in the database
        int TotalPages = (int)Math.Ceiling((double)RecordCount / PageSize); // Calculate total pages

        // Ensure the requested page ID is within valid bounds
        if (_ID < 1) _ID = 1;
        if (_ID > TotalPages && TotalPages > 0) _ID = TotalPages;
        else if (TotalPages == 0) _ID = 1; // If no data, default to page 1

        int SkipCount = (_ID - 1) * PageSize; // Calculate records to skip

        // Retrieve products for the current page from the database
        var productsOnPage = await _context.Productss
            .OrderBy(p => p.ProductID) // Always order for consistent pagination
            .Skip(SkipCount)
            .Take(PageSize)
            .ToListAsync();

        // --- Generate Pagination HTML (similar to CharacterController) ---
        StringBuilder sbPageList = new StringBuilder();
        int Pages = TotalPages;
        int block_page = (_ID - 1) / 10;

        if (block_page > 0)
        {
            int prevBlockStartPage = block_page * 10 - 9;
            if (prevBlockStartPage < 1) prevBlockStartPage = 1;
            sbPageList.Append($"<a href=\"?_ID={prevBlockStartPage}\"> [前十頁<<] </a>&nbsp;&nbsp;");
        }

        for (int K = 0; K < 10; K++)
        {
            int currentPageNumber = block_page * 10 + K + 1;
            if (currentPageNumber <= Pages)
            {
                if (currentPageNumber == _ID)
                {
                    sbPageList.Append($"[<b>{_ID}</b>]&nbsp;&nbsp;&nbsp;");
                }
                else
                {
                    sbPageList.Append($"<a href=\"?_ID={currentPageNumber}\">{currentPageNumber}</a>");
                    sbPageList.Append("&nbsp;&nbsp;&nbsp;");
                }
            }
        }

        int nextBlockStartPage = (block_page + 1) * 10 + 1;
        if (nextBlockStartPage <= Pages)
        {
            sbPageList.Append($"&nbsp;&nbsp;<a href=\"?_ID={nextBlockStartPage}\"> [後十頁>>] </a>");
        }
        // --- End Pagination HTML Generation ---

        // Create a ViewModel (we'll define this next) to pass data to the view
        var viewModel = new ProductListViewModel
        {
            Products = productsOnPage,
            CurrentPage = _ID,
            PageSize = PageSize,
            TotalRecords = RecordCount,
            TotalPages = TotalPages,
            PagingHtml = sbPageList.ToString()
        };

        return View(viewModel);
    }

    // GET: /Products/Details/5
    public async Task<IActionResult> Details(int? id)
    {
        if (id == null) return NotFound();

        var product = await _context.Productss.FirstOrDefaultAsync(m => m.ProductID == id);
        if (product == null) return NotFound();

        return View(product);
    }

    // GET: /Products/Create
    public IActionResult Create()
    {
        return View();
    }

    // POST: /Products/Create
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Create([Bind("ProductName,ProductCategory,ProductDate,ProductPrice")] Product product)
    {
        // ProductID is typically auto-generated by the database for primary keys
        if (ModelState.IsValid)
        {
            _context.Add(product);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index)); // Redirect to product list
        }
        return View(product);
    }

    // GET: /Products/Edit/5
    public async Task<IActionResult> Edit(int? id)
    {
        if (id == null) return NotFound();

        var product = await _context.Productss.FindAsync(id);
        if (product == null) return NotFound();

        return View(product);
    }

    // POST: /Products/Edit/5
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Edit(int id, [Bind("ProductID,ProductName,ProductCategory,ProductDate,ProductPrice")] Product product)
    {
        if (id != product.ProductID) return NotFound();

        if (ModelState.IsValid)
        {
            try
            {
                _context.Update(product);
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ProductExists(product.ProductID))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }
            return RedirectToAction(nameof(Index));
        }
        return View(product);
    }

    // GET: /Products/Delete/5
    public async Task<IActionResult> Delete(int? id)
    {
        if (id == null) return NotFound();

        var product = await _context.Productss.FirstOrDefaultAsync(m => m.ProductID == id);
        if (product == null) return NotFound();

        return View(product);
    }

    // POST: /Products/Delete/5
    [HttpPost, ActionName("Delete")]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> DeleteConfirmed(int id)
    {
        var product = await _context.Productss.FindAsync(id);
        if (product != null)
        {
            _context.Productss.Remove(product);
            await _context.SaveChangesAsync();
        }
        return RedirectToAction(nameof(Index));
    }

    private bool ProductExists(int id)
    {
        return (_context.Productss?.Any(e => e.ProductID == id)).GetValueOrDefault();
    }
}